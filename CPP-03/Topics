---------------------------- INHERITANCE ----------------------------------------------
Consideriamo Un Gruppo di Caratteristiche che delle classi hanno in comune, quindi immaginiamo che queste classi abbiano gli
stessi attributi e funzioni, anzichè riscrivere le stesse funzioni o attributi per tutte le classi possiamo ereditarli dalla 
classe madre ed evitare di riscriverle per tutte le altre classi.
La sintassi è la seguente:
    class nome_sottoclasse : access_mode  classe madre 
    { 
            //corpo della sottoclasse 
    };
Una classe non eredita l'accesso ai membri privati di un'altra classe.

----------------------------- TIPI DI ACCESSO -------------------------------------------

Public:     se ereditiamo da una classe base in modo publico, erediteremo tutti gli attributi
            e le funzioni public della classe madre come public nella sottoclasse e quelli protected
            come protected nella sottoclasse.
Protected:  in questo caso se ereditiamo in modo protected, gli attributi e funzioni Publiche
            diventeranno Protected, quelle protected resteranno protected.
Private:    qui invece sia ciò che è Public e Protected diventa Privato nella classe ereditiera.


---------------------------- TIPI DI EREDITARIETÁ ----------------------------------------

SINGLE INHERITANCE : nella single inheritance la classe eredita solo da un'altra classe
                    Sintassi:
                    Class Sottoclasse : Public ClasseMadre
                    {
                        //corpo
                    }
MULTIPLE INHERITANCE : in multiple inheritance possiamo ereditare da più classi
                    Sintassi:
                    Class Sottoclasse : Public ClasseMadre1, Public ClasseMadre2, Protected ClasseMadre3 ...
                    {
                        //corpo
                    }
MULTILEVEL INHERITANCE : in questo caso una classe derivata deriva da un'altra classe derivata

--------------------------------------VIRTUAL -----------------------------------------------

Si potrebbe verificare la condizione per cui 1 classe derivi da altre classi che a loro volta
derivano da classi in comune. A questo punto nella classe finale si verificherebbe 1 duplicazione
per ogni classe che ha incomune la stessa classe.Questo genererebbe un Error nel compilatore poichè
non saprebbe quali funzioni richiamare tra i più. Entra in gioco il Virtual che consente
di rendere univoca la classe madre ereditata da più classi e risolverebbe il problema.

    Esempio:
                        Classe A{}
                            |
                  __________|____________
                |                        |           
                |                        |
                |                        |
             Classe B{}                classe C{}
                |                        |
                |                        |
                |________________________|
                            |
                            |
                        Classe D{}

        - La classe A è ereditata da B e C.
        - Nella classe D viene ereditato B e C.
        - Entrambe B e C contengono A
        - A questo punto in D diene copiato B+A & C+A
        - Nella Classe D A viene copiato 2 volte
        - Usiamo Virtual affinchè venga copiato 1 sola volta per
            tutte le classi.
        
        Sintassi:
                class B : virtual public A 
                {
                };

                OR

                class C : public virtual A
                {
                };   